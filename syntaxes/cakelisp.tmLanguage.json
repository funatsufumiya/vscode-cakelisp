{
  "fileTypes": [
    "cakelisp"
  ],
  "foldingStartMarker": "\\(",
  "foldingStopMarker": "\\)",
  "keyEquivalent": "^~L",
  "name": "Cakelisp",
  "patterns": [
    {
      "include": "#all"
    }
  ],
  "repository": {
    "all": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#parens"
        },
        {
          "include": "#brackets"
        },
        {
          "include": "#braces"
        },
        {
          "include": "#readermac"
        },
        {
          "include": "#string"
        },
        {
          "include": "#longstring"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#corelib"
        },
        {
          "include": "#r-number"
        },
        {
          "include": "#dec-number"
        },
        {
          "include": "#hex-number"
        },
        {
          "include": "#keysym"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "comment": {
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.cakelisp"
        }
      },
      "match": "(;;).*$",
      "name": "comment.line.cakelisp"
    },
    "braces": {
      "begin": "(@?{)",
      "captures": {
        "1": {
          "name": "punctuation.definition.braces.end.cakelisp"
        }
      },
      "end": "(})",
      "patterns": [
        {
          "include": "#all"
        }
      ]
    },
    "brackets": {
      "begin": "(@?\\[)",
      "captures": {
        "1": {
          "name": "punctuation.definition.brackets.end.cakelisp"
        }
      },
      "end": "(\\])",
      "patterns": [
        {
          "include": "#all"
        }
      ]
    },
    "parens": {
      "begin": "(@?\\()",
      "captures": {
        "1": {
          "name": "punctuation.definition.parens.end.cakelisp"
        }
      },
      "end": "(\\))",
      "patterns": [
        {
          "include": "#all"
        }
      ]
    },
    "literal": {
      "match": "(?<![\\.:\\w_\\-=!@\\$%^&?/<>*])(true|false|null)(?![\\.:\\w_\\-=!@\\$%^&?/<>*])",
      "name": "constant.language.cakelisp"
    },
    "corelib": {
      "match": "(?<![\\.:\\w_\\-=!@\\$%^&?/<>*])(skip\\-build|add\\-cpp\\-build\\-dependency|add\\-library\\-dependency|add\\-linker\\-options|add\\-build\\-options|add\\-build\\-config\\-label|add\\-c\\-search\\-directory\\-global|comptime\\-define\\-symbol|set\\-cakelisp\\-option|ignore|break|comptime\\-error|def|defun|defun\\-local|defun\\-comptime|ref|deref|def\\-type\\-alias|def\\-type\\-alias\\-global|incr|decr|addr|at|for\\-in|call\\-on|\\?|\\!\\=|type\\-cast|field|scope|defun\\-comptime|c\\-import|c\\-for|tokenize\\-push|token\\-splice|token\\-splice\\-rest|comptime\\-cond|c\\-preprocessor\\-define|array\\-size|each\\-in\\-range|continue|do|var|const|set|while|if|quote|quasiquote|unquote|splice|%|%=|\\*|\\*=|\\+|\\+\\+|\\+=|\\-|\\-\\-|\\-=|\\->|\\->>|\\-\\?>|\\-\\?>>|/|/=|<|<=|=|>|>=|abstract\\?|accumulate|accumulate2|all|all\\-bindings|all\\-dynamics|and|any\\?|apply|array|assert|bit\\-or|bit\\-and|block|buffer|cancel|case|cmp|comment|comptime|compwhen|cond|coro|count|curenv|debugger\\-env|dec|deep\\-not=|deep=|def\\-|default|default\\-peg\\-grammar|defer|defglobal|defmacro|defmacro\\-|defgenerator|defstruct|describe|dictionary\\?|disasm|distinct|doc|doc\\*|doc\\-format|dofile|drop|each|empty\\?|error|errorf|eval|eval\\-string|even\\?|every\\?|extreme|false\\?|filter|find|first|flatten|flush|for|forever|forv|freeze|frequencies|function\\?|fprintf|free|gccollect|gcinterval|gcsetinterval|generate|gensym|get|get\\-in|getline|hash|idempotent\\?|identity|if\\-let|if\\-not|if\\-with|import|import\\*|in|inc|index\\-of|indexed\\?|int/s64|int/u64|int\\?|interleave|interpose|invert|keep|keys|keyword|kvs|label|last|length|let|loop|macex|macex1|map|mapcat|marshal|match|partial|partition|prinf|print|printf|product|prompt|propagate|protect|put|quit|range|reduce|reduce2|repeat|repl|require|resume|return|reverse|reverse!|root\\-env|run\\-context|scan\\-number|seq|setdyn|short\\-fn|signal|slice|slurp|some|sort|sort\\-by|sorted|sorted\\-by|spit|stderr|stdin|stdout|string|struct|struct\\?|sum|symbol/slice|symbol\\?|table|take|trace|tracev|true\\?|truthy\\?|try|tuple|tuple/brackets|tuple/setmap|tuple/slice|tuple/sourcemap|tuple/type|tuple\\?|type|unless|unmarshal|untrace|update|update\\-in|use|values|var\\-|varfn|varglobal|walk|when|when\\-let|when\\-with|with|with\\-dyns|with\\-syms|with\\-vars|xprin|xprinf|xprint|xprintf|yield|zero\\?|zipcoll)(?![\\.:\\w_\\-=!@\\$%^&?/<>*])",
      "name": "keyword.control.cakelisp"
    },
    "keysym": {
      "match": "(?<![\\.:\\w_\\-=!@\\$%^&?/<>*]):[\\.:\\w_\\-=!@\\$%^&?/<>*]*",
      "name": "constant.keyword.cakelisp"
    },
    "symbol": {
      "match": "(?<![\\.:\\w_\\-=!@\\$%^&?/<>*])[\\.a-zA-Z_\\-=!@\\$%^&?/<>*][\\.:\\w_\\-=!@\\$%^&?/<>*]*",
      "name": "variable.other.cakelisp"
    },
    "hex-number": {
      "match": "(?<![\\.:\\w_\\-=!@\\$%^&?/<>*])[-+]?0x([_\\da-fA-F]+|[_\\da-fA-F]+\\.[_\\da-fA-F]*|\\.[_\\da-fA-F]+)(&[+-]?[\\da-fA-F]+)?(?![\\.:\\w_\\-=!@\\$%^&?/<>*])",
      "name": "constant.numeric.hex.cakelisp"
    },
    "dec-number": {
      "match": "(?<![\\.:\\w_\\-=!@\\$%^&?/<>*])[-+]?([_\\d]+|[_\\d]+\\.[_\\d]*|\\.[_\\d]+)([eE&][+-]?[\\d]+)?(?![\\.:\\w_\\-=!@\\$%^&?/<>*])",
      "name": "constant.numeric.decimal.cakelisp"
    },
    "r-number": {
      "match": "(?<![\\.:\\w_\\-=!@\\$%^&?/<>*])[-+]?\\d\\d?r([_\\w]+|[_\\w]+\\.[_\\w]*|\\.[_\\w]+)(&[+-]?[\\w]+)?(?![\\.:\\w_\\-=!@\\$%^&?/<>*])",
      "name": "constant.numeric.decimal.cakelisp"
    },
    "string": {
      "begin": "(@?\")",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.begin.cakelisp"
        }
      },
      "end": "(\")",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.cakelisp"
        }
      },
      "name": "string.quoted.double.cakelisp",
      "patterns": [
        {
          "match": "(\\\\[nevr0zft\"\\\\']|\\\\x[0-9a-fA-F]{2}|\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{6})",
          "name": "constant.character.escape.cakelisp"
        }
      ]
    },
    "longstring": {
      "begin": "(@?)(`+)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.begin.cakelisp"
        },
        "2": {
          "name": "punctuation.definition.string.begin.cakelisp"
        }
      },
      "end": "\\2",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.cakelisp"
        }
      },
      "name": "string.quoted.triple.cakelisp"
    },
    "nomatch": {
      "match": "\\S+",
      "name": "invalid.illegal.cakelisp"
    }
  },
  "scopeName": "source.cakelisp",
  "uuid": "3743190a-20c4-44d0-8640-6611a983296b"
}